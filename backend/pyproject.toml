[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-trading-agent"
version = "1.0.0"
description = "LLM-powered cryptocurrency trading agent for AsterDEX"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "AI Trading Agent Development Team"}
]
keywords = ["trading", "cryptocurrency", "llm", "asterdex", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    # Web Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "websockets>=13.0",

    # Configuration & Environment
    "python-dotenv>=1.1.1",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",

    # Database
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",

    # HTTP & Web3
    "aiohttp>=3.13.1",
    "requests>=2.32.5",
    "web3>=7.14.0",

    # API Clients
    "openai>=2.5.0",
    "aster-connector-python @ git+https://github.com/asterdex/aster-connector-python.git",

    # Technical Analysis
    # "TA-Lib>=0.4.28",  # TODO: Install from system packages

    # CLI & Utilities
    "typer>=0.12.0",
    "rich>=14.2.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "ipython>=8.18.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "faker>=20.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/ai-trading-agent"
Documentation = "https://github.com/yourusername/ai-trading-agent/docs"
Repository = "https://github.com/yourusername/ai-trading-agent.git"
Issues = "https://github.com/yourusername/ai-trading-agent/issues"

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/app"]

